/*!
# Flaca
*/

#![deny(unsafe_code)]

#![warn(
	clippy::filetype_is_file,
	clippy::integer_division,
	clippy::needless_borrow,
	clippy::nursery,
	clippy::pedantic,
	clippy::perf,
	clippy::suboptimal_flops,
	clippy::unneeded_field_pattern,
	macro_use_extern_crate,
	missing_copy_implementations,
	missing_debug_implementations,
	missing_docs,
	non_ascii_idents,
	trivial_casts,
	trivial_numeric_casts,
	unreachable_pub,
	unused_crate_dependencies,
	unused_extern_crates,
	unused_import_braces,
)]

#![allow(
	clippy::module_name_repetitions,
	clippy::redundant_pub_crate,
)]



mod error;
mod image;
mod jobs;

pub(crate) use error::{
	EncodingError,
	FlacaError,
};
pub(crate) use image::kind::ImageKind;

use argyle::{
	Argue,
	ArgyleError,
	FLAG_HELP,
	FLAG_REQUIRED,
	FLAG_VERSION,
};
use dactyl::traits::{
	BytesToSigned,
	BytesToUnsigned,
};
use dowser::{
	Dowser,
	Extension,
};
use fyi_msg::Msg;
use std::{
	num::NonZeroUsize,
	sync::OnceLock,
};



// The E_JPEG, E_JPG, and E_PNG constants are generated by build.rs.
include!(concat!(env!("OUT_DIR"), "/flaca-extensions.rs"));

/// # Number of Zopfli Iterations.
pub(crate) static ZOPFLI_ITERATIONS: OnceLock<i32> = OnceLock::new();



/// # Main.
///
/// This shell provides us a way to easily handle error responses. Actual
/// processing is done by `_main()`.
fn main() {
	match _main() {
		Ok(()) => {},
		Err(FlacaError::Argue(ArgyleError::WantsVersion)) => {
			println!(concat!("Flaca v", env!("CARGO_PKG_VERSION")));
		},
		Err(FlacaError::Argue(ArgyleError::WantsHelp)) => { helper(); },
		Err(e) => { Msg::error(e).die(1); },
	}
}

#[inline]
/// # Actual Main.
///
/// This is the actual main, allowing us to easily bubble errors.
fn _main() -> Result<(), FlacaError> {
	// Parse CLI arguments.
	let args = Argue::new(FLAG_HELP | FLAG_REQUIRED | FLAG_VERSION)?
		.with_list();

	// Figure out which kinds we're doing.
	let kinds = match (args.switch2(b"--no-jpeg", b"--no-jpg"), args.switch(b"--no-png")) {
		(false, false) => ImageKind::All,
		(true, false) => ImageKind::Png,
		(false, true) => ImageKind::Jpeg,
		(true, true) => return Err(FlacaError::NoImages),
	};

	// Zopfli iterations.
	if let Some(n) = args.option(b"-z") {
		let n = i32::btoi(n)
			.filter(|n| 0 < *n)
			.ok_or(FlacaError::ZopfliIterations)?;
		let _res = ZOPFLI_ITERATIONS.set(n);
	}

	// Figure out the maximum number of threads to use…
	let mut threads = std::thread::available_parallelism().unwrap_or(NonZeroUsize::MIN);
	if let Some(t) = args.option(b"-j") {
		if let Some(t) = t.strip_prefix(b"-").and_then(NonZeroUsize::btou) {
			threads = threads.get().checked_sub(t.get())
				.and_then(NonZeroUsize::new)
				.unwrap_or(NonZeroUsize::MIN);
		}
		else if let Some(t) = NonZeroUsize::btou(t) {
			if t < threads { threads = t; }
		}
	}

	// Find and sort the images!
	let mut paths = Dowser::default()
		.with_paths(args.args_os())
		.into_vec_filtered(|p| Extension::try_from3(p).map_or_else(
			|| Some(E_JPEG) == Extension::try_from4(p),
			|e| e == E_JPG || e == E_PNG
		));
	paths.sort();

	// Sexy run-through.
	if args.switch2(b"-p", b"--progress") {
		jobs::exec_pretty(threads, kinds, &paths)
	}
	// Silent run-through.
	else { jobs::exec(threads, kinds, &paths) }
}

#[cold]
/// # Print Help.
fn helper() {
	println!(concat!(
		r"
             ,--._,--.
           ,'  ,'   ,-`.
(`-.__    /  ,'   /
 `.   `--'        \__,--'-.
   `--/       ,-.  ______/
     (o-.     ,o- /
      `. ;        \    ", "\x1b[38;5;199mFlaca\x1b[0;38;5;69m v", env!("CARGO_PKG_VERSION"), "\x1b[0m", r#"
       |:          \   Brute-force, lossless
      ,'`       ,   \  JPEG and PNG compression.
     (o o ,  --'     :
      \--','.        ;
       `;;  :       /
        ;'  ;  ,' ,'
        ,','  :  '
        \ \   :
         `

USAGE:
    flaca [FLAGS] [OPTIONS] <PATH(S)>...

FLAGS:
    -h, --help        Print help information and exit.
        --no-jpeg     Skip JPEG images.
        --no-png      Skip PNG images.
    -p, --progress    Show pretty progress while minifying.
    -V, --version     Print version information and exit.

OPTIONS:
    -j <NUM>          Limit parallelization to this many threads (instead of
                      giving each logical core its own image to work on). If
                      negative, the value will be subtracted from the total
                      number of logical cores.
    -l, --list <FILE> Read (absolute) image and/or directory paths from this
                      text file — or STDIN if "-" — one entry per line, instead
                      of or in addition to (actually trailing) <PATH(S)>.
    -z <NUM>          Run NUM lz77 backward/forward iterations during zopfli
                      PNG encoding passes. More iterations yield better
                      compression (up to a point), but require *significantly*
                      longer processing times. In practice, values beyond 500
                      are unlikely to save more than a few bytes, and could
                      take *days* to complete! Haha. [default: 20 or 60,
                      depending on the file size]
ARGS:
    <PATH(S)>...      One or more image and/or directory paths to losslessly
                      compress.

EARLY EXIT:
    Press "#, "\x1b[38;5;208mCTRL\x1b[0m+\x1b[38;5;208mC\x1b[0m once to quit as soon as the already-in-progress operations
    have finished (ignoring any pending images still in the queue).

    Press \x1b[38;5;208mCTRL\x1b[0m+\x1b[38;5;208mC\x1b[0m a second time if you need to exit IMMEDIATELY, but note that
    doing so may leave artifacts (temporary files) behind, and in rare cases,
    lead to image corruption.

OPTIMIZERS USED:
    MozJPEG   <https://github.com/mozilla/mozjpeg>
    Oxipng    <https://github.com/shssoichiro/oxipng>
    Zopflipng <https://github.com/google/zopfli>
"
	));
}
